{"version":3,"sources":["App/App.js","serviceWorker.js","index.js"],"names":["customTheme","theme","colors","brand","900","800","700","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","ChatRoom","dark","chatBottom","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behaviour","className","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","props","messageClass","timestamp","Date","seconds","day","getDate","toString","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","src","alt","SignIn","Button","variantColor","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","signOut","App","isLight","isDark","useAuthState","user","ThemeProvider","IconButton","aria-label","icon","role","href","rel","CSSReset","Boolean","window","location","hostname","match","store","createStore","state","action","type","render","ReactDOM","StrictMode","getState","dispatch","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ee024802.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Button, IconButton } from \"@chakra-ui/core\";\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core'\nimport { theme } from \"@chakra-ui/core\";\nimport './App.scss';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nconst customTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    brand: {\n      900: \"#1a365d\",\n      800: \"#153e75\",\n      700: \"#2a69ac\",\n    },\n  },\n};\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCuD7ReJ10Od7VuWMp976Bx93zZvvNZKXI\",\n  authDomain: \"elektriq-219815.firebaseapp.com\",\n  databaseURL: \"https://elektriq-219815.firebaseio.com\",\n  projectId: \"elektriq-219815\",\n  storageBucket: \"elektriq-219815.appspot.com\",\n  messagingSenderId: \"975811330058\",\n  appId: \"1:975811330058:web:42483886f36b36d9799ff3\",\n  measurementId: \"G-YK67YTZS4C\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App({dark, isLight, isDark}) {\n  const [user] = useAuthState(auth);\n\n  return (\n    <ThemeProvider theme={customTheme}>\n      <div className={`app ${dark ? \"dark\" : \"light\"} h-screen`}>\n        <section className={`${dark ? \"bg-gray-900\" : \"bg-white\"} py-5 mb-10 text-dark shadow-lg`}>\n          <div className=\"container\">\n            <div className=\"flex justify-between\">\n              <img src=\"/logo-dark.svg\" alt=\"Logo\" className={`${dark ? \"hidden\" : \"\"}`} />\n              <img src=\"/logo-light.svg\" alt=\"Logo\" className={`${dark ? \"\" : \"hidden\"}`} />\n              <div>\n                <SignOut dark={dark} />\n                <span className={`${dark ? \"\" : \"hidden\"}`}>\n                  <IconButton onClick={isLight} variantColor=\"gray\" aria-label=\"Light Mode\" icon=\"sun\" />\n                </span>\n                <span className={`${dark ? \"hidden\" : \"\"}`}>\n                  <IconButton onClick={isDark} variantColor=\"gray\" aria-label=\"Dark Mode\" icon=\"moon\" />\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n        <section>\n          <div className=\"container\">\n            {user ? <ChatRoom dark={dark}/> : <SignIn />}\n          </div>\n        </section>\n        <footer className=\"text-center items-center text-white font-medium py-5 md:py-10\">\n          <p>Made with <span role=\"img\" aria-label=\"emoji\">❤️</span> by\n            <a href=\"https://findtoni.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <img src=\"https://findtoni.com/wp-content/uploads/sites/23/2018/11/logo_white.png\" className={`${dark ? \"\" : \"hidden\"} ml-2 h-8 inline-block`} alt=\"findToni.com\" />\n              <img src=\"https://findtoni.com/wp-content/uploads/sites/23/2018/11/logo_white.png\" className={`${dark ? \"hidden\" : \"\"} ml-2 h-8 inline-block`} alt=\"findToni.com\" />\n            </a>\n            <br /> Built with React\n          </p>\n        </footer>\n      </div>\n      <CSSReset />\n    </ThemeProvider>\n  );\n}\n\nfunction ChatRoom({dark}) {\n  const chatBottom = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n  const [messages] = useCollectionData(query, {idField: 'id'});\n  const [formValue, setFormValue] = useState('');\n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue('');\n    chatBottom.current.scrollIntoView({behaviour: 'smooth'});\n  }\n\n  return (\n    <section className=\"superchat\">\n      {/* All Chats */}\n      <div className=\"superchat__board\">\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <div ref={chatBottom}></div>\n      </div>\n\n      {/* New Chat */}\n      <form onSubmit={sendMessage} className=\"superchat__new py-10 w-full\">\n        <div className=\"container\">\n          <input value={formValue} onChange={(e) => setFormValue(e.target.value)} className=\"text-black w-full rounded px-3 h-10\"\n            placeholder=\"Type and hit enter, I'm sure it works...\" />\n        </div>\n      </form>\n    </section>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, createdAt, photoURL } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  const timestamp = new Date(createdAt.seconds * 1000);\n  const day = timestamp.getDate().toString();\n  const month = timestamp.getMonth().toString();\n  const year = timestamp.getFullYear().toString();\n  const hour = timestamp.getHours().toString();\n  const minute = timestamp.getMinutes().toString();\n\n  return (\n    <div className={`message-${messageClass} bubble flex items-center pb-3`}>\n      <img src={photoURL} alt=\"User\" className=\"h-10 rounded\" />\n      <div className=\"message bg-white py-2 px-3 rounded\">\n        <p className={`text-sm sm:text-xs font-medium`}>{text}</p>\n      </div>\n      <p className=\"timestamp pl-2 text-xs font-medium\">{`${day}/${month}/${year} - ${hour}:${minute}`}</p>\n    </div>\n  )\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <div className=\"text-center pt-56\">\n      <Button variantColor=\"green\" onClick={signInWithGoogle}>Login with Google</Button>\n    </div>\n  )\n}\n\nfunction SignOut({dark}) {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()} className={`${dark ? \"text-white\" : \"text-dark\"} pr-3 font-bold text-xs`}>Logout</button>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './assets/main.css'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\n\nfunction dark(state = false, action) {\n  switch (action.type) {\n    case 'ISDARK':\n      return true\n    case 'ISLIGHT':\n      return false\n    default:\n      return state\n  }\n}\n\nconst store = createStore(dark);\n\nconst render = () => ReactDOM.render(\n  <React.StrictMode store={store}>\n    <App\n      dark={store.getState()}\n      isDark={() => store.dispatch({ type: 'ISDARK' })}\n      isLight={() => store.dispatch({ type: 'ISLIGHT' })}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nrender()\nstore.subscribe(render)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}